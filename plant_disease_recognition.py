# -*- coding: utf-8 -*-
"""plant_disease_recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TbrRi0gNCsfUyYdUiSHzJpjUSQMwg1ts
"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage import img_as_float
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16, ResNet50, Xception, InceptionV3, DenseNet201, MobileNet
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import *

train_data_generator = ImageDataGenerator(
    rescale = 1./255,
    horizontal_flip=True,
    zoom_range= 0.2,
    shear_range=0.1,
    rotation_range=15,
)

test_data_generator = ImageDataGenerator(rescale = 1./255)
val_data_generator = ImageDataGenerator(rescale = 1./255)

train_generator = train_data_generator.flow_from_directory(
    directory = '/kaggle/input/plant-disease-recognition-dataset/Train/Train',
    class_mode = 'categorical',
    target_size = (128,128),
    batch_size = 32,
)

test_generator = test_data_generator.flow_from_directory(
    directory = '/kaggle/input/plant-disease-recognition-dataset/Test/Test',
    class_mode = 'categorical',
    target_size = (128,128),
    batch_size = 32,
    shuffle = False
)
val_generator = val_data_generator.flow_from_directory(
    directory = '/kaggle/input/plant-disease-recognition-dataset/Validation/Validation',
    class_mode = 'categorical',
    target_size = (128,128),
    batch_size = 32,
    shuffle = False
)

# Get a batch of images and labels
images, labels = next(train_generator)

# Class names
class_names = list(train_generator.class_indices.keys())

plt.figure(figsize=(15, 8))

for i in range(12):
    plt.subplot(3, 4, i + 1)
    plt.imshow(images[i])
    label_index = np.argmax(labels[i])
    plt.title(f"Label: {class_names[label_index]}")
    plt.axis('off')

plt.tight_layout()
plt.show()

"""# Custom CNN"""

model1 = Sequential([
    Conv2D(32, (3,3), activation = 'relu', input_shape=(128,128,3)),
    MaxPooling2D(2,2),
    Conv2D(32, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation = 'relu'),

    Flatten(),
    Dense(512, activation = 'relu'),
    Dropout(0.5),
    Dense(3, activation = 'softmax')

])
model1.summary()

model1.compile(optimizer='adam', loss='categorical_crossentropy', metrics = ['accuracy'])

history1 = model1.fit(train_generator, epochs = 10, batch_size = 128, validation_data = test_generator)

test_loss , test_accuracy = model1.evaluate(test_generator)
print(f"test loss: {test_loss}, test accuracy : {test_accuracy}")

y_true = test_generator.classes

y_pred_prob = model1.predict(test_generator)
y_pred = np.argmax(y_pred_prob, axis=1)

import seaborn as sns
cm = confusion_matrix(y_true, y_pred)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

print(classification_report(y_true, y_pred, target_names = test_generator.class_indices.keys()))

"""# VGG16 Model"""

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(128, 128, 3))

for layer in base_model.layers:
    layer.trainable = False

vgg_model = Sequential([
    base_model,
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])

vgg_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

vgg_history = vgg_model.fit(train_generator, epochs = 10, batch_size = 128, validation_data = test_generator)

test_loss , test_accuracy = vgg_model.evaluate(test_generator)
print(f"test loss: {test_loss}, test accuracy : {test_accuracy}")

y_true = test_generator.classes

vgg_y_pred_prob = vgg_model.predict(test_generator)
vgg_y_pred = np.argmax(vgg_y_pred_prob, axis=1)

cm = confusion_matrix(y_true, vgg_y_pred)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('VGG16 Confusion Matrix')
plt.show()

print(classification_report(y_true, vgg_y_pred, target_names = test_generator.class_indices.keys()))

"""# MobileNetV2"""

from tensorflow.keras.applications import MobileNetV2
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(128, 128, 3))

for layer in base_model.layers:
    layer.trainable = False

mobilenet_model = Sequential([
    base_model,
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])

mobilenet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

mobilenet_history = mobilenet_model.fit(train_generator, epochs = 10, batch_size = 128, validation_data = test_generator)

test_loss , test_accuracy = mobilenet_model.evaluate(test_generator)
print(f"test loss: {test_loss}, test accuracy : {test_accuracy}")

y_true = test_generator.classes

mobilenet_y_pred_prob = mobilenet_model.predict(test_generator)
mobilenet_y_pred = np.argmax(mobilenet_y_pred_prob, axis=1)

cm = confusion_matrix(y_true, mobilenet_y_pred)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('MobileNetV2 Confusion Matrix')
plt.show()

print(classification_report(y_true, mobilenet_y_pred, target_names = test_generator.class_indices.keys()))

"""# compare 3 Models accuracy"""

plt.plot(history1.history['loss'], label = 'CNN-Training', marker = 'o')
plt.plot(history1.history['val_loss'], label = 'CNN-Validation',linestyle = '--', marker = 'o')

plt.plot(vgg_history.history['loss'], label = 'VGG16-Trainig', marker = 's')
plt.plot(vgg_history.history['val_loss'], label = 'VGG16-Validation',linestyle = '--', marker = 's')

plt.plot(mobilenet_history.history['loss'], label = 'MobileNetV2-Trainig', marker = 'd')
plt.plot(mobilenet_history.history['val_loss'], label = 'MobileNetV2-Validation',linestyle = '--', marker = 'd')

plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Models Loss Comparison')
plt.legend()
plt.grid()
plt.show()


plt.plot(history1.history['accuracy'], label = 'CNN-Trainig', marker = 'o')
plt.plot(history1.history['val_accuracy'], label = 'CNN-Validation',linestyle = '--', marker = 'o')

plt.plot(vgg_history.history['accuracy'], label = 'VGG16-Trainig', marker = 's')
plt.plot(vgg_history.history['val_accuracy'], label = 'VGG16-Validation',linestyle = '--', marker = 's')

plt.plot(mobilenet_history.history['accuracy'], label = 'MobileNetV2-Trainig', marker = 'd')
plt.plot(mobilenet_history.history['val_accuracy'], label = 'MobileNetV2-Validation',linestyle = '--', marker = 'd')

plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Models Accuracy Comparison')
plt.legend()
plt.grid()
plt.show()

